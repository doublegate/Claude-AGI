# .github/workflows/ci-pipeline.yml
# Consolidated CI/CD Pipeline for Claude-AGI

name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Setup job - installs dependencies once and caches them
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements-test.txt') }}" >> $GITHUB_OUTPUT
      
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: ~/.cache/pip
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-${{ runner.os }}-
      
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements-test.txt') }}
      
      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install -r requirements-test.txt

  # Unit Tests - Fast feedback
  unit-tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Restore virtual environment
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements-test.txt') }}
      
      - name: Run unit tests
        run: |
          source venv/bin/activate
          pytest tests/unit -v --cov=src --cov-report=xml --cov-report=term-missing
        env:
          CLAUDE_AGI_TEST_MODE: "true"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit-tests
          name: unit-test-coverage

  # Integration Tests - Requires services
  integration-tests:
    needs: setup
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: claude_agi_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Restore virtual environment
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements-test.txt') }}
      
      - name: Run integration tests
        run: |
          source venv/bin/activate
          pytest tests/integration -v --timeout=60 --timeout-method=thread --cov=src --cov-report=xml
        env:
          REDIS_URL: redis://localhost:6379
          POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/claude_agi_test
          CLAUDE_AGI_TEST_MODE: "true"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integration-tests
          name: integration-test-coverage

  # Safety Tests - Security validation
  safety-tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Restore virtual environment
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements-test.txt') }}
      
      - name: Run safety validations
        run: |
          source venv/bin/activate
          pytest tests/safety -v -m safety --cov=src --cov-report=xml
        env:
          CLAUDE_AGI_TEST_MODE: "true"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: safety-tests
          name: safety-test-coverage

  # Performance Tests - Benchmark validation
  performance-tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Restore virtual environment
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt', 'requirements-test.txt') }}
      
      - name: Run performance benchmarks
        run: |
          source venv/bin/activate
          pytest tests/performance -v --cov=src --cov-report=xml
        env:
          CLAUDE_AGI_TEST_MODE: "true"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: performance-tests
          name: performance-test-coverage

  # Consolidated Results - Final validation
  test-results:
    needs: [unit-tests, integration-tests, safety-tests, performance-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Safety Tests: ${{ needs.safety-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          
          if [[ "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.safety-tests.result }}" == "success" && 
                "${{ needs.performance-tests.result }}" == "success" ]]; then
            echo "✅ All test suites passed!"
            exit 0
          else
            echo "❌ One or more test suites failed"
            exit 1
          fi

  # Individual test commands (can be triggered manually)
  run-unit-only:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      - name: Run unit tests only
        run: python scripts/run_tests.py unit
        env:
          CLAUDE_AGI_TEST_MODE: "true"

  run-integration-only:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: claude_agi_test
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      - name: Run integration tests only
        run: python scripts/run_tests.py integration
        env:
          REDIS_URL: redis://localhost:6379
          POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/claude_agi_test
          CLAUDE_AGI_TEST_MODE: "true"

  run-safety-only:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      - name: Run safety tests only
        run: python scripts/run_tests.py safety
        env:
          CLAUDE_AGI_TEST_MODE: "true"

  run-performance-only:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      - name: Run performance tests only
        run: python scripts/run_tests.py performance
        env:
          CLAUDE_AGI_TEST_MODE: "true"