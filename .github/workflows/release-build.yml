# .github/workflows/release-build.yml
# Build and Release Claude-AGI Executables

name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.10)'
        required: true
        default: 'v1.0.10'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  # Build executables for multiple platforms
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            executable_ext: ""
            setup_script: |
              sudo apt-get update
              sudo apt-get install -y libncurses5-dev libncursesw5-dev
          - os: windows-latest
            platform: windows
            arch: x86_64
            executable_ext: ".exe"
            setup_script: |
              pip install windows-curses
          - os: macos-latest
            platform: macos
            arch: x86_64
            executable_ext: ""
            setup_script: |
              # macOS has ncurses built-in

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Platform-specific setup
        run: ${{ matrix.setup_script }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install anthropic>=0.18.0
          pip install pyyaml>=6.0
          pip install pydantic>=2.5.0
          pip install python-dotenv>=1.0.0
          pip install tenacity>=8.2.0
          pip install pyinstaller

      - name: Install platform-specific dependencies  
        if: matrix.platform == 'windows'
        run: pip install windows-curses

      - name: Create executable spec file
        run: |
          python -c "
          spec_content = '''# -*- mode: python ; coding: utf-8 -*-

          block_cipher = None

          a = Analysis(
              ['claude-agi.py'],
              pathex=[],
              binaries=[],
              datas=[
                  ('configs/', 'configs/'),
                  ('src/', 'src/'),
                  ('.env.example', '.'),
                  ('README.md', '.'),
                  ('CHANGELOG.md', '.'),
              ],
              hiddenimports=[
                  'anthropic',
                  'asyncio',
                  'yaml',
                  'pydantic',
                  'dotenv',
                  'tenacity',
                  'logging',
                  'dataclasses',
                  'typing',
                  'pathlib',
                  'argparse',
                  'datetime',
                  'collections',
                  'enum',
                  'sqlite3',
                  'json',
                  're',
                  'os',
                  'sys',
                  'time',
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=['tkinter', 'matplotlib', 'IPython', 'jupyter'],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='claude-agi${{ matrix.executable_ext }}',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=False,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          '''
          with open('claude-agi.spec', 'w') as f:
              f.write(spec_content)
          "

      - name: Build executable
        run: |
          # Build with PyInstaller
          pyinstaller claude-agi.spec --clean --noconfirm
          
      - name: Verify executable was created
        run: |
          python -c "
          import os
          platform = '${{ matrix.platform }}'
          ext = '${{ matrix.executable_ext }}'
          exe_name = f'claude-agi{ext}'
          exe_path = os.path.join('dist', exe_name)
          if os.path.exists(exe_path):
              size = os.path.getsize(exe_path)
              print(f'SUCCESS: Executable created: {exe_path} ({size:,} bytes)')
          else:
              print(f'ERROR: Executable not found: {exe_path}')
              print('Files in dist:')
              if os.path.exists('dist'):
                  for f in os.listdir('dist'):
                      print(f'  {f}')
              exit(1)
          "

      - name: Test executable (basic validation)
        run: |
          python -c "
          import subprocess
          import os
          platform = '${{ matrix.platform }}'
          ext = '${{ matrix.executable_ext }}'
          exe_name = f'claude-agi{ext}'
          exe_path = os.path.join('dist', exe_name)
          
          print(f'Testing executable: {exe_path}')
          try:
              result = subprocess.run([exe_path, '--help'], capture_output=True, text=True, timeout=30)
              if result.returncode == 0:
                  print('SUCCESS: Executable test passed')
                  print('Output preview:', result.stdout[:200] + '...' if len(result.stdout) > 200 else result.stdout)
              else:
                  print(f'ERROR: Executable test failed with return code {result.returncode}')
                  print('stderr:', result.stderr)
          except Exception as e:
              print(f'ERROR: Error testing executable: {e}')
              exit(1)
          "

      - name: Create archive
        run: |
          python -c "
          import os
          import shutil
          import zipfile
          import tarfile
          
          platform = '${{ matrix.platform }}'
          arch = '${{ matrix.arch }}'
          ext = '${{ matrix.executable_ext }}'
          exe_name = f'claude-agi{ext}'
          exe_path = os.path.join('dist', exe_name)
          
          if platform == 'windows':
              archive_name = f'claude-agi-{platform}-{arch}.zip'
              with zipfile.ZipFile(archive_name, 'w', zipfile.ZIP_DEFLATED) as zf:
                  zf.write(exe_path, exe_name)
              print(f'Created {archive_name}')
          else:
              archive_name = f'claude-agi-{platform}-{arch}.tar.gz'
              with tarfile.open(archive_name, 'w:gz') as tf:
                  tf.add(exe_path, exe_name)
              print(f'Created {archive_name}')
          
          # Verify archive was created
          if os.path.exists(archive_name):
              size = os.path.getsize(archive_name)
              print(f'Archive size: {size:,} bytes')
          else:
              print(f'ERROR: Archive not created: {archive_name}')
              exit(1)
          "

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: claude-agi-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            claude-agi-${{ matrix.platform }}-${{ matrix.arch }}.*
            dist/claude-agi${{ matrix.executable_ext }}
          retention-days: 7

  # Create GitHub release with built executables
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "claude-agi-*" -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"

          # Extract changelog entry for this version
          if grep -q "## \[$VERSION\]" CHANGELOG.md; then
            NOTES=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | head -n -1 | tail -n +2)
          else
            NOTES="Release $VERSION

          ## What's New
          - Claude-AGI executable builds for Linux, Windows, and macOS
          - Standalone deployment without Python installation required
          - All Phase 1 features included in portable format

          ## Installation
          1. Download the appropriate executable for your platform
          2. Extract the archive
          3. Run \`claude-agi --help\` to get started

          ## System Requirements
          - Terminal with color support
          - Minimum 80x20 terminal size
          - For API features: ANTHROPIC_API_KEY environment variable

          See the full [CHANGELOG.md](https://github.com/doublegate/Claude-AGI/blob/main/CHANGELOG.md) for detailed changes."
          fi

          # Write to file for multi-line output
          echo "$NOTES" > release_notes.txt
          echo "notes_file=release_notes.txt" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          if gh release view "$VERSION" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            # Get existing release body
            gh release view "$VERSION" --json body -q .body > existing_notes.txt
            echo "Existing release found, will preserve its content and add artifacts"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No existing release found, will create new one"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing release or create new one
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          
          if [ "${{ steps.check_release.outputs.exists }}" = "true" ]; then
            echo "Existing release found. Removing old build artifacts before uploading new ones..."
            
            # Get list of existing assets
            EXISTING_ASSETS=$(gh release view "$VERSION" --json assets -q '.assets[].name')
            
            # Delete existing build artifacts (preserve other files)
            for asset in $EXISTING_ASSETS; do
              if [[ "$asset" == claude-agi-*.tar.gz ]] || [[ "$asset" == claude-agi-*.zip ]]; then
                echo "Deleting old artifact: $asset"
                gh release delete-asset "$VERSION" "$asset" -y || true
              fi
            done
            
            echo "Uploading new artifacts to existing release..."
            for file in release-assets/*; do
              echo "Uploading: $file"
              gh release upload "$VERSION" "$file" --clobber || true
            done
          else
            echo "Creating new release..."
            gh release create "$VERSION" \
              --title "Claude-AGI $VERSION" \
              --notes-file "${{ steps.release_notes.outputs.notes_file }}" \
              ${{ github.event.inputs.prerelease == 'true' && '--prerelease' || '' }} \
              release-assets/*
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release pointer
        if: ${{ !github.event.inputs.prerelease }}
        run: |
          echo "SUCCESS: Release ${{ github.event.inputs.version || github.ref_name }} published!"
          echo "Available executables:"
          echo "  - Linux (x86_64): claude-agi-linux-x86_64.tar.gz"
          echo "  - Windows (x86_64): claude-agi-windows-x86_64.zip"
          echo "  - macOS (x86_64): claude-agi-macos-x86_64.tar.gz"
